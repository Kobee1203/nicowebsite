<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" id="WebApp_ID" version="2.5">
  <display-name>JohnDog</display-name>
  
  	<!--
		- Location of the Log4J config file, for initialization and refresh checks.
		- Applied by Log4jConfigListener.
	-->
	<context-param>
		<param-name>log4jConfigLocation</param-name>
		<param-value>/WEB-INF/classes/log4j.xml</param-value>
	</context-param>

	<!--
		- Location of the XML file that defines the root application context.
		- Applied by ContextLoaderServlet.
	-->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>
			/WEB-INF/captcha-service.xml
			/WEB-INF/security.xml
			/WEB-INF/hibernate_mysql.xml
			/WEB-INF/dao.xml
			/WEB-INF/service.xml
		</param-value>
	</context-param>

	<!--
		- Loads the root application context of this web app at startup,
		- by default from "/WEB-INF/applicationContext.xml".
		- Note that it is preferable to use ContextLoaderListener in a servlet container
		- that follows the Servlet 2.4 initialization order (many Servlet 2.3 containers do).
		-
		- Use WebApplicationContextUtils.getWebApplicationContext(servletContext)
		- to access it anywhere in the web application, outside of the framework.
		-
		- The root context is the parent of all servlet-specific contexts.
		- This means that its beans are automatically available in these child contexts,
		- both for getBean(name) calls and (external) bean references.
	-->
	<listener>
		<listener-class>
			org.springframework.web.context.ContextLoaderListener
		</listener-class>
	</listener>

	<!-- ACEGI -->
	<filter>
		<filter-name>Spring Security Filter Chain Proxy</filter-name>
		<filter-class>
			org.springframework.security.util.FilterToBeanProxy
		</filter-class>
		<init-param>
			<param-name>targetClass</param-name>
			<param-value>
				org.springframework.security.util.FilterChainProxy
			</param-value>
		</init-param>
	</filter>

	<filter>
		<filter-name>Hibernate Session In View Filter</filter-name>
    	<filter-class>
    		org.springframework.orm.hibernate3.support.OpenSessionInViewFilter
		</filter-class>
	</filter>

	<filter-mapping>
		<filter-name>Hibernate Session In View Filter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<filter-mapping>
		<filter-name>Spring Security Filter Chain Proxy</filter-name>
		<url-pattern>/*</url-pattern>
		<dispatcher>FORWARD</dispatcher>
        <dispatcher>REQUEST</dispatcher>
	</filter-mapping>

	<!-- END OF ACEGI -->

	<!-- ===================== 
	Main Servlet
	==========================-->

	<servlet>
		<servlet-name>main</servlet-name>  
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<load-on-startup>1</load-on-startup>
	</servlet>

	<servlet-mapping>
		<servlet-name>main</servlet-name>
		<url-pattern>*.html</url-pattern>
	</servlet-mapping>
	
	<servlet>
		<servlet-name>Faces Servlet</servlet-name>
		<servlet-class>javax.faces.webapp.FacesServlet</servlet-class>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>Faces Servlet</servlet-name>
		<url-pattern>*.xhtml</url-pattern>
	</servlet-mapping>
	
	<filter>
		<filter-name>MyFacesExtensionsFilter</filter-name>
		<filter-class>org.apache.myfaces.webapp.filter.ExtensionsFilter</filter-class>
		<init-param>
			<param-name>maxFileSize</param-name>
			<param-value>10m</param-value>
			<description>Set the size limit for uploaded files.
            	Format: 10 - 10 bytes
                	    10k - 10 KB
                    	10m - 10 MB
                    	1g - 1 GB
			</description>
		</init-param>
		<init-param>
			<param-name>uploadRepositoryPath</param-name>
			<param-value>/tmp</param-value>
		</init-param>
	</filter>

	<!-- extension mapping for adding <script/>, <link/>, and other resource tags to JSF-pages  -->
	<filter-mapping>
    	<filter-name>MyFacesExtensionsFilter</filter-name>
    	<!-- servlet-name must match the name of your javax.faces.webapp.FacesServlet entry -->
		<servlet-name>Faces Servlet</servlet-name>
	</filter-mapping>

	<!-- extension mapping for serving page-independent resources (javascript, stylesheets, images, etc.)  -->
	<filter-mapping>
    	<filter-name>MyFacesExtensionsFilter</filter-name>
    	<url-pattern>/extension/*</url-pattern>
	</filter-mapping>


	<!-- ===================== 
	Because of the mapping to / of the main servlet, we need to
	add the resources (images, css, javascript) to the default servlet
	defined in the Tomcat web.xml
	==========================-->
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.css</url-pattern>
	</servlet-mapping>
	
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.jpg</url-pattern>
	</servlet-mapping>
	
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.gif</url-pattern>
	</servlet-mapping>
	
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.png</url-pattern>
	</servlet-mapping>
	
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.js</url-pattern>
	</servlet-mapping>
	
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.ico</url-pattern>
	</servlet-mapping>

	<!-- various MIME type mappings ====================================== -->
	<mime-mapping>
		<extension>css</extension>
		<mime-type>text/css</mime-type>
	</mime-mapping>

	<mime-mapping>
		<extension>xml</extension>
		<mime-type>text/xml</mime-type>
	</mime-mapping>

	<mime-mapping>
		<extension>xsl</extension>
		<mime-type>text/xml</mime-type>
	</mime-mapping>
  
	<!-- Welcome -->
	<welcome-file-list>
	    <welcome-file>/index.jsp</welcome-file>  
	</welcome-file-list>
	
	<context-param>
		<param-name>welcomeURL</param-name>
		<param-value>home.html</param-value>
	</context-param>
  
	<error-page>
		<error-code>500</error-code>
		<location>/error500.jsp</location>
	</error-page>
	<error-page>
		<error-code>404</error-code>
		<location>/error404.jsp</location>
	</error-page>
	<error-page>
		<error-code>403</error-code>
		<location>/error403.jsp</location>
	</error-page>
		
</web-app>